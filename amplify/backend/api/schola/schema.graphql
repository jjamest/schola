type User @model @auth(rules: [{ allow: private }]) {
  id: ID!
  displayUsername: String!
  school: String!
  webcalURL: String
  friendships: [Friendship] @hasMany(indexName: "byInitiator", fields: ["id"])
}

# Represents a mutual friendship or pending request between two users
type Friendship @model @auth(rules: [
  { allow: owner, ownerField: "initiatorId", operations: [create, read, delete] },
  { allow: owner, ownerField: "recipientId", operations: [update, read, delete] }
]) {
  id: ID!
  initiatorId: ID! @index(name: "byInitiator", queryField: "friendshipsByInitiator")
  recipientId: ID! @index(name: "byRecipient", queryField: "friendshipsByRecipient")
  initiator: User @belongsTo(fields: ["initiatorId"])
  recipient: User @belongsTo(fields: ["recipientId"])
  status: FriendshipStatus!
}
enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}